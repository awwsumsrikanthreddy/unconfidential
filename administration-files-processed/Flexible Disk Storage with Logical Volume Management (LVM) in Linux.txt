Setup Flexible Disk Storage with Logical Volume Management (LVM) in Linux



Logical Volume Management (LVM) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>makes it easier to manage disk space. 

>>If a file system needs more space, it can be added to its logical volumes from the free spaces in its volume group and the file system can be re-sized as we wish. 

>>If a disk starts to fail, replacement disk can be registered as a physical volume with the volume group and the logical volumes extents can be migrated to the new disk without data loss.

>>In a modern world every Server needs more space day by day for that we need to expand depending on our needs. Logical volumes can be use in RAID, SAN. 

>>A Physical Disk will be grouped to create a volume Group. Inside volume group we need to slice the space to create Logical volumes. While using logical volumes we can extend across multiple disks, logical volumes or reduce logical volumes in size with some commands without reformatting and re-partitioning the current disk. 

>>Volumes can stripes data across multiple disks this can increase the I/O stats



LVM Features
>>>>>>>>>>>>

    It is flexible to expand the space at any time.
    Any file systems can be installed and handle.
    Migration can be used to recover faulty disk.
    Restore the file system using Snapshot features to earlier stage. etc…




Creating LVM Disk Storage in Linux
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


1. We’ve used CentOS 6.5 Operating system using LVM in a Virtual Disk (VDA). Here we can see the Physical Volume (PV), Volume Group (VG), Logical Volume (LV) by using following command.

command: # pvs 
command: # vgs
command: # lvs


Here, is the description of each parameters shown in above screenshot.

    Physical Disk Size (PV Size)
    Disk which used was Virtual Disk vda.
    Volume Group Size (VG Size)
    Volume Group name (vg_tecmint)
    Logical Volume name (LogVol00, LogVol01)
    LogVol00 Assigned for sawp with 1GB Size
    LogVol01 Assigned for / with 16.5GB

So, from here we come to know that there is not enough free space in VDA disk.




2. For Creating a New Volume Group, we need to add Additional 3 hard disks in this server. It is not Compulsory to use 3 Drives just 1 is Enough to create a new VG and LV inside that vg, I am adding more here for demonstration purpose and for more feature command explanations.

Following are the disks I have added additionally.

sda, sdb, sdc

command: # fdisk -l

command: vgdisplay



3. Only vda used, Currently Centos Installed /boot, /, swap, in vda physical disk using lvm there were no space remaining in this disk.

command: # df -TH


4.command: # fdisk -cu /dev/sda



    c – Switch off DOS-compatible mode it is Recommend to include this Option.
    u – While listing the partition tables it will give us in sector instead of cylinder.


5. create a lvm partition 

6. command:# fdisk -l



Creating Physical Volumes
>>>>>>>>>>>>>>>>>>>>>>>>>>

# pvs

Then create the new physical disks using command.

command: # pvcreate /dev/sda1 /dev/sdb1 /dev/sdc1

command: # pvs



Creating Volume Groups
>>>>>>>>>>>>>>>>>>>>>>>

command: # vgs

>>This will create the volume group using 32MB PE size in the name of tecmint_add_vg using 3 Physical volumes we created in last steps.

command: # vgcreate -s 32M tecmint_add_vg /dev/sda1 /dev/sdb1 /dev/sdc1

 Next, verify the volume group by running vgs command again.


command: # vgs

	

Logical Volume Management (LVM) makes it easier to manage disk space. If a file system needs more space, it can be added to its logical volumes from the free spaces in its volume group and the file system can be re-sized as we wish. If a disk starts to fail, replacement disk can be registered as a physical volume with the volume group and the logical volumes extents can be migrated to the new disk without data loss.
Create LVM Storage in Linux

Create LVM Storage in Linux

In a modern world every Server needs more space day by day for that we need to expand depending on our needs. Logical volumes can be use in RAID, SAN. A Physical Disk will be grouped to create a volume Group. Inside volume group we need to slice the space to create Logical volumes. While using logical volumes we can extend across multiple disks, logical volumes or reduce logical volumes in size with some commands without reformatting and re-partitioning the current disk. Volumes can stripes data across multiple disks this can increase the I/O stats.
LVM Features

    It is flexible to expand the space at any time.
    Any file systems can be installed and handle.
    Migration can be used to recover faulty disk.
    Restore the file system using Snapshot features to earlier stage. etc…

My Server Setup – Requirements

    Operating System – CentOS 6.5 with LVM Installation
    Server IP – 192.168.0.200

This series will be titled Preparation for the setting up LVM (Logical Volume Management) through Parts 1-6 and covers the following topics.
Part 1: Setup Flexible Disk Storage with Logical Volume Management
Part 2: How to Extend/Reduce LVM’s in Linux
Part 3: How to Take Snapshot of Logical Volume and Restore in LVM
Part 1: Setup 4hin Provisioning Volumes in LVM
Part 5: Manage Multiple LVM Disks using Striping I/O
Part 6: Migrating LVM Partitions to New Logical Volume (Drive)
Creating LVM Disk Storage in Linux

1. We’ve used CentOS 6.5 Operating system using LVM in a Virtual Disk (VDA). Here we can see the Physical Volume (PV), Volume Group (VG), Logical Volume (LV) by using following command.

# pvs 
# vgs
# lvs

Check Physical Volumes

Check Physical Volumes

Here, is the description of each parameters shown in above screenshot.

    Physical Disk Size (PV Size)
    Disk which used was Virtual Disk vda.
    Volume Group Size (VG Size)
    Volume Group name (vg_tecmint)
    Logical Volume name (LogVol00, LogVol01)
    LogVol00 Assigned for sawp with 1GB Size
    LogVol01 Assigned for / with 16.5GB

So, from here we come to know that there is not enough free space in VDA disk.

2. For Creating a New Volume Group, we need to add Additional 3 hard disks in this server. It is not Compulsory to use 3 Drives just 1 is Enough to create a new VG and LV inside that vg, I am adding more here for demonstration purpose and for more feature command explanations.

Following are the disks I have added additionally.

sda, sdb, sdc

# fdisk -l

Verify Added Disks

Verify Added Disks

    Default Disk using for Operating system (Centos6.5).
    Partitions defined in default Disk (vda1 = swap), (vda2 = /).
    Additionally added Disks are mentioned as Disk1, Disk2, Disk3.

Each and every Disks are 20 GB in Size. Default PE Size of a Volume Group is 4 MB, Volume group what we are using in this server is configured using default PE.
Volume Group Display

Volume Group Display

    VG Name – A Volume Group name.
    Format – LVM Architecture Used LVM2.
    VG Access – Volume Group is in Read and Write and ready to use.
    VG Status – Volume Group can be re-sized, We can Expand more if we need to add more space.
    Cur LV – Currently there was 2 Logical volumes in this Volume Group.
    CurPV and Act PV – Currently Using Physical Disk was 1 (vda), And its active, so what we can use this volume group.
    PE Size – Physical Extends, Size for a disk can be defined using PE or GB size, 4MB is the Default PE size of LVM. For example, if we need to create 5 GB size of logical volume we can use sum of 1280 PE, Don’t you understand what I’m saying ?.

Here the Explanation –> 1024MB = 1GB, if so 1024MB x 5 = 5120PE = 5GB, Now Divide the 5120/4 = 1280, 4 is the Default PE Size.

    Total PE – This Volume Group have.
    Alloc PE – Total PE Used, full PE already Used, 4482 x 4PE = 17928.
    Free PE – Here it’s already used so there was no free PE.

3. Only vda used, Currently Centos Installed /boot, /, swap, in vda physical disk using lvm there were no space remaining in this disk.

# df -TH

Check the Disk Space

Check the Disk Space

Above image shows the mount Point we are using 18GB fully used for root, so there is no free space available.

4. So let’s, create new physical volume (pv), Volume Group (vg) in the name of tecmint_add_vg and create Logical Volumes (lv) in it, Here we can create 4 Logical Volumes in the name of tecmint_documents, tecmint_manager and tecmint_public.

We can extend the Volume Group of currently using VG to get more space. But here, what we are going to do is to Create new Volume Group and play around it, later we can see how to extend the file systems Volume group which is currently in use.

Before using a new Disk we need to partition the disk using fdisk.

# fdisk -cu /dev/sda

    c – Switch off DOS-compatible mode it is Recommend to include this Option.
    u – While listing the partition tables it will give us in sector instead of cylinder.

Create New Physical Partitions

Create New Physical Partitions

Next, follow the below steps to create new partition.

    Choose n to create new.
    Choose p to create a primary partition.
    Choose which number of partition we need to create.
    Press Enter twice to use the full space of the Disk.
    We need to change the type of newly created partition type t.
    Which number of partition need to change, choose the number which we created its 1.
    Here we need to change the type, we need to create LVM so we going to use the type code of LVM as 8e, if we do not know the type code Press L to list all type codes.
    Print the Partition what we created to just confirm.
    Here we can see the ID as 8e LINUX LVM.
    Write the changes and exit fdisk.

Do the above steps for other 2 disks sdb and sdc to create new partitions. Then Restart the machine to verify the partition table using fdisk command.

# fdisk -l

Verify Partition Table

Verify Partition Table
Creating Physical Volumes

5. Now, it’s time to create Physical Volumes using all 3 disks. Here, I have listed the physical disk using pvs command, only one default pvs is now listed.

# pvs

Then create the new physical disks using command.

# pvcreate /dev/sda1 /dev/sdb1 /dev/sdc1

Once again list the disk to see the newly created Physical disks.

# pvs

Create Physical Volumes

Create Physical Volumes
Creating Volume Groups

6. Create Volume Group in the name of tecmint_add_vg using available free PV Create using PE size 32. To Display the current volume groups, we can see there is one volume group with 1 PV using.

# vgs

This will create the volume group using 32MB PE size in the name of tecmint_add_vg using 3 Physical volumes we created in last steps.

# vgcreate -s 32M tecmint_add_vg /dev/sda1 /dev/sdb1 /dev/sdc1

Next, verify the volume group by running vgs command again.

# vgs

Create Volume Groups

Create Volume Groups
Verify Volume Groups

Verify Volume Groups



Understanding vgs command output:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Volume Group name.
    Physical Volumes used in this Volume Group.
    Shows free space available in this volume group.
    Total Size of the Volume Group.
    Logical Volumes inside this volume group, Here we have not yet created so there is 0.
    SN = Number of Snapshots the volume group contains. (Later we can create a snapshot).
    Status of the Volume group as Writeable, readable, resizeable, exported, partial and clustered, Here it is wz–n-
    that means w = Writable,z = resizeable..
    Number of Physical Volume (PV) used in this Volume Group.

>>To Display more information about volume group use command.


command: # vgs -v

>>To get more information about newly created volume groups, run the following command.

command: # vgdisplay tecmint_add_vg(vgname)



Creating Logical Volumes
>>>>>>>>>>>>>>>>>>>>>>>>>

command: # lvs

command: # pvs






Method 1: Creating Logical Volumes using PE Size’s
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


command: # vgdisplay vgname



    Default PE Assigned for this VG is 32MB, Here Single PE size will be 32MB.
    Total Available PE is 1725.

Just do and see a little Calculation using bc command.

# bc

1725PE/3 = 575 PE. 

575 PE x 32MB = 18400 --> 18GB

Calculate Disk Space




# lvcreate -l (Extend size) -n (name_of_logical_volume) (volume_group)

# lvcreate -l 575 -n tecmint_documents tecmint_add_vg

# lvcreate -l 575 -n tecmint_manager tecmint_add_vg

# lvcreate -l 575 -n tecmint_public tecmint_add_vg




    -l – Creating using Extent Size
    -n – Give a Logical Volume name.

List the Created Logical Volumes using lvs com


command: # lvs





Method 2: Creating Logical Volumes using GB Size’s
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


While Creating Logical Volume using GB size we cannot get the exact size. So, the better way is to create using extend.

# lvcreate -L 18G -n tecmint_documents tecmint_add_vg

# lvcreate -L 18G -n tecmint_manager tecmint_add_vg

# lvcreate -L 18G -n tecmint_public tecmint_add_vg

# lvcreate -L 17.8G -n tecmint_public tecmint_add_vg


#lvs



creating File System
>>>>>>>>>>>>>>>>>>>>

for using the logical volumes we need to format. Here I am using ext4 file-system to create the volumes and going to mount under /mnt/.

# mkfs.ext4 /dev/tecmint_add_vg/tecmint_documents

# mkfs.ext4 /dev/tecmint_add_vg/tecmint_public

# mkfs.ext4 /dev/tecmint_add_vg/tecmint_manager





 Let us Create Directories in /mnt and Mount the Logical volumes what we have created file-system.

# mount /dev/tecmint_add_vg/tecmint_documents /mnt/tecmint_documents/

# mount /dev/tecmint_add_vg/tecmint_public /mnt/tecmint_public/

# mount /dev/tecmint_add_vg/tecmint_manager /mnt/tecmint_manager/




# vim /etc/fstab




/dev/mapper/tecmint_add_vg-tecmint_documents    /mnt/tecmint_documents  ext4    defaults 0 0
/dev/mapper/tecmint_add_vg-tecmint_public       /mnt/tecmint_public     ext4    defaults 0 0
/dev/mapper/tecmint_add_vg-tecmint_manager      /mnt/tecmint_manager    ext4    defaults 0 0



#mount -av


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



How to Extend/Reduce LVM’s (Logical Volume Management) in Linux – Part II
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


# pvs
# vgs
# lvs



>>>For adding a new PV we have to use fdisk to create the LVM partition.

# fdisk -cu /dev/sda


# fdisk -l /dev/sda



Next, create new PV (Physical Volume) using following command.


# pvcreate /dev/sda1


Verify the pv using below command.


# pvs





Extending Volume Group
>>>>>>>>>>>>>>>>>>>>>>

Add this pv to vg_tecmint vg to extend the size of a volume group to get more space for expanding lv.

# vgextend vg_tecmint /dev/sda1

Let us check the size of a Volume Group now using.

# vgs



# pvscan



# lvextend -l +4607 /dev/vg_tecmint/LogVol01

Use + to add the more space. After Extending, we need to re-size the file-system using.

# resize2fs /dev/vg_tecmint/LogVol01



# pvs
# vgs
# lvs






Reducing Logical Volume (LVM)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




Here we are going to see how to reduce the Logical Volumes. Everyone say its critical and may end up with disaster while we reduce the lvm. Reducing lvm is really interesting than any other part in Logical volume management.

    Before starting, it is always good to backup the data, so that it will not be a headache if something goes wrong.
    To Reduce a logical volume there are 5 steps needed to be done very carefully.
    While extending a volume we can extend it while the volume under mount status (online), but for reduce we must need to unmount the file system before reducing.

Let’s wee what are the 5 steps below.

    unmount the file system for reducing.
    Check the file system after unmount.
    Reduce the file system.
    Reduce the Logical Volume size than Current size.
    Recheck the file system for error.
    Remount the file-system back to stage.



# umount -v /mnt/tecmint_reduce_test/


# e2fsck -ff /dev/vg_tecmint_extra/tecmint_reduce_test


# resize2fs /dev/vg_tecmint_extra/tecmint_reduce_test 8GB


# lvreduce -L -8G /dev/vg_tecmint_extra/tecmint_reduce_test


# lvdisplay vg_tecmint_extra

>>Here we need to do a little calculation to get the PE size of 10GB using bc command.

1024MB x 10GB = 10240MB or 10GB

10240MB / 4PE = 2048PE




# lvreduce -l -2048 /dev/vg_tecmint_extra/tecmint_reduce_test


# resize2fs /dev/vg_tecmint_extra/tecmint_reduce_test


# mount /dev/vg_tecmint_extra/tecmint_reduce_test /mnt/tecmint_reduce_test/


# lvdisplay vg_tecmint_extra



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Creating LVM Snapshot
>>>>>>>>>>>>>>>>>>>>>


# vgs
# lvs

# lvcreate -L 1GB -s -n tecmint_datas_snap /dev/vg_tecmint_extra/tecmint_datas        

OR

# lvcreate --size 1G --snapshot --name tecmint_datas_snap /dev/vg_tecmint_extra/tecmint_datas


>>Both the above commands does the same thing:

    -s – Creates Snapshot
    -n – Name for snapshot

# lvdisplay vg_tecmint_extra/tecmint_data_snap



Again, here is the clear explanation of each point highlighted in the above picture.

    Name of Snapshot Logical Volume.
    Volume group name currently under use.
    Snapshot volume in read and write mode, we can even mount the volume and use it.
    Time when the snapshot was created. This is very important because snapshot will look for every changes after this time.
    This snapshot belongs to tecmint_datas logical volume.
    Logical volume is online and available to use.
    Size of Source volume which we took snapshot.
    Cow-table size = copy on Write, that means whatever changes was made to the tecmint_data volume will be written to this snapshot.
    Currently snapshot size used, our tecmint_datas was 10G but our snapshot size was 1GB that means our file is around 650 MB. So what its now in 51% if the file grow to 2GB size in tecmint_datas size will increase more than snapshot allocated size, sure we will be in trouble with snapshot. That means we need to extend the size of logical volume (snapshot volume).
    Gives the size of chunk for snapshot.






Extend Snapshot in LVM
>>>>>>>>>>>>>>>>>>>>>>>>


# lvextend -L +1G /dev/vg_tecmint_extra/tecmint_data_snap


# lvdisplay /dev/vg_tecmint_extra/tecmint_data_snap

#  lvs


Restoring Snapshot or Merging
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


# unmount /mnt/tecmint_datas/

#df -hT


# lvconvert --merge /dev/vg_tecmint_extra/tecmint_data_snap


#lvs


Important: To Extend the Snapshots automatically, we can do it using some modification in conf file. For manual we can extend using lvextend.

Open the lvm configuration file using your choice of editor.

# vim /etc/lvm/lvm.conf







