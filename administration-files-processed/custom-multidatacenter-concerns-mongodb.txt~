Differences Between Read Preferences and Write Concerns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

link:https://docs.mongodb.org/manual/tutorial/configure-replica-set-tag-sets/



Custom Multi-Datacenter Write Concerns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>Given a five member replica set with members in two data centers:

    a facility VA tagged dc.va
    a facility GTO tagged dc.gto

>>Create a custom write concern to require confirmation from two data centers using replica set tags, using the following sequence of operations in the mongo shell:

    1.Create a replica set configuration JavaScript object conf:

                 conf = rs.conf()

    2.Add tags to the replica set members reflecting their locations:

             conf.members[0].tags = { "dc.va": "rack1"}
             conf.members[1].tags = { "dc.va": "rack2"}
             conf.members[2].tags = { "dc.gto": "rack1"}
             conf.members[3].tags = { "dc.gto": "rack2"}
             conf.members[4].tags = { "dc.va": "rack1"}
             rs.reconfig(conf)

    3.Create a custom getLastErrorModes setting to ensure that the write operation will propagate to at least one member of each facility:

             conf.settings = { getLastErrorModes: { MultipleDC : { "dc.va": 1, "dc.gto": 1 } } }

    4.Reconfigure the replica set using the modified conf configuration object:

              rs.reconfig(conf)

>>To ensure that a write operation propagates to at least one member of the set in both data centers, use the MultipleDC write concern mode as follows:

             db.users.insert( { id: "xyz", status: "A" }, { writeConcern: { w: "MultipleDC" } } )


>>Alternatively, if you want to ensure that each write operation propagates to at least 2 racks in each facility, reconfigure the replica set as follows in the mongo shell:

    1.Create a replica set configuration object conf:

             conf = rs.conf()

    2.Redefine the getLastErrorModes value to require two different values of both dc.va and dc.gto:

             conf.settings = { getLastErrorModes: { MultipleDC : { "dc.va": 2, "dc.gto": 2}}

    3.Reconfigure the replica set using the modified conf configuration object:

              rs.reconfig(conf)

>>Now, the following write operation will only return after the write operation propagates to at least two different racks in the each facility:

>>Changed in version 2.6: A new protocol for write operations integrates write concerns with the write operations. Previous versions used the getLastError command to specify the write concerns.

           
             db.users.insert( { id: "xyz", status: "A" }, { writeConcern: { w: "MultipleDC" } } )



Configure Tag Sets for Functional Segregation of Read and Write Operations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>Given a replica set with tag sets that reflect:

    data center facility,
    physical rack location of instance, and
    storage system (i.e. disk) type.

>>Where each member of the set has a tag set that resembles one of the following: [1]

                           {"dc.va": "rack1", disk:"ssd", ssd: "installed" }
                           {"dc.va": "rack2", disk:"raid"} 
                           {"dc.gto": "rack1", disk:"ssd", ssd: "installed" }
                           {"dc.gto": "rack2", disk:"raid"}
                           {"dc.va": "rack1", disk:"ssd", ssd: "installed" }

>>To target a read operation to a member of the replica set with a disk type of ssd, you could use the following tag set:

                          { disk: "ssd" }

>>However, to create comparable write concern modes, you would specify a different set of getLastErrorModes configuration. Consider the following sequence of operations in the mongo shell:

  1.  Create a replica set configuration object conf:

                       conf = rs.conf()

  2.  Redefine the getLastErrorModes value to configure two write concern modes:

        conf.settings = {
                     "getLastErrorModes" : {
                             "ssd" : {
                                        "ssd" : 1
                             },
                             "MultipleDC" : {
                                     "dc.va" : 1,
                                    "dc.gto" : 1
                             }
                     }
                   }

  
3. Reconfigure the replica set using the modified conf configuration object

              
                             rs.reconfig(conf)

>>Now you can specify the MultipleDC write concern mode, as in the following, to ensure that a write operation propagates to each data center.

>>Changed in version 2.6: A new protocol for write operations integrates write concerns with the write operations. Previous versions used the getLastError command to specify the write concerns.

                   
                      db.users.insert( { id: "xyz", status: "A" }, { writeConcern: { w: "MultipleDC" } } )

>>Additionally, you can specify the ssd write concern mode to ensure that a write operation propagates to at least one instance with an SSD.


note:
>>>>
>>The read preference does not affect the visibility of data; i.e, clients can see the results of writes before they are made durable:

>>Regardless of write concern, other clients can see the result of the write operations before the write operation is acknowledged to the issuing client.
  
>>Clients can read data which may be subsequently rolled back.



