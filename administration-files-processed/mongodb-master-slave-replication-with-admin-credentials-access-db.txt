mongodb master slave replication with admin credentials to access db
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

master:
>>>>>>
IP: 192.168.56.116
HOSTNAME:mongodb1

slave:
>>>>>>
IP:192.168.56.115
HOSTNAME:mongodb2

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

theory:
>>>>>>>

1.on master start mongodb, use local or admin ,check for sources collectiion and make sure its empty by default

2.create user with admin credentials and password with read write role

3.when slave falls behind primary because of slave restart or may be because secondary falls behind for data updates  from primary.

4.using "resync" we can replicate from start using this command

5.or we can also use "--autosync" to automatically resync

6.oplog size for 64 bit systems 1GB min, 50MB for 32 bit

7.if oplog size is not defined it takes 5% of available disk.

security:

>> we can authenticate keyfile, to enable authentication configure key file 
and
>>in /etc/mongodb.conf file 

add>> following

keyFile= /srv/mongodb/keyFile

>>we can use openssl to configure key file

link: http://docs.mongodb.org/manual/tutorial/reconfigure-replica-set-with-unavailable-members/

#openssl rand -base64 741



encryption techniques:

1.using tls/ssl

2.app level restriction

3.storage level encryption


authentication mechanisms:

>>mongodb uses SCRAM-SHA-1 challenge and response authentication mechanism, previously used mongodb challenge and response MONGODB-CR

>> mongodb supports

 1.LDAP  authentication (no support on windows)
 
 2.kerberos authentication

 3.x509 authentication (using tls/ssl)



practical
>>>>>>>>>

at Master
>>>>>>>>>>>

# serivce mongod status

# ps -ef | grep 'mongo'

# mongod --dbpath /var/lib/mongo &

# show dbs

# 

#
    >>>>>>on both master and slave shutdown and take backup data if needed

# ps -ef | grep 'mongo' 

# vim /etc/mongodb.conf

  replSet=rs0

# service mongod restart

# mongod --replSet rs0  

# rs.conf() or db.runcommand({replSetGetconfig: 1});

# rs.initiate()

# db.isMaster()

# rs.status()

# rs.PrintReplicationInfo() or db.PrintReplicationInfo() 

# db.serverStatus() or db.ServerStatus({ repl: 1})


at slave :
>>>>>>>>>

# service mongod status
 
# ps -ef | grep 'mongo'

# vim /etc/mongod.conf

  replSet = rs0

# mongod --replSet rs0  --dbpath /var/lib/mongo &

or 

mongod --replSet rs0 --logpath /var/log/mongodb/mongod.log --dbpath /data/db1 --port 27017

# rs.conf()
 

at master:
>>>>>>>>>>

# mongo

# rs.add("mongodb2")

# rs.conf()

# rs.status()

# show dbs

# use admin

# show collections

# db.createUser(({"user": "srikanth","pwd": "123","roles": ["readwrite"]})


at slave:
>>>>>>>>>

# mongo --port 27017 -u admin -p 123 --authenticationDatabase admin

# rs.slaveok()

or  db.getmongo().setslave ok()

>>>>>this command does slave ok and gets data 

# show dbs

# use admin

# show collections

# exit


# mongo

# show dbs           >>>>>>>.throws error because noauthentication

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


check replication info
>>>>>>>>>>>>>>>>>>>>>>

slave
>>>>>

rs.conf()

rs.printSlaveReplicationInfo()

db.printSlaveReplicationInfo()

db.serverStatus() or db.ServerStatus({ repl: 1})

master
>>>>>>

rs.conf()

rs.PrintReplicationInfo()

db.printReplicationInfo()

db.serverStatus()

db.serverStatus({ repl: 1})


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



db.createUser(
    {
      user: "srikanth",
      pwd: "123",
      roles: [
         { role: "readWrite", db: "srikanth" }
      ]
    }
)









db.createUser({user:"admin",pwd:"123", roles:[{role:"root",db:"admin"}]})


db.createUser({user:"admin",pwd:"123", roles:[{role:"userAdminAnyDatabase",db:"admin"}]})




force primary to become secondaru


http://docs.mongodb.org/manual/reference/method/rs.stepDown/





arbiter



rs.addArb("arbiter:27017")

link:http://docs.mongodb.org/master/tutorial/add-replica-set-arbiter/ 
